export default ["constructor(address _factory, address _oldFactory, address _wavax)","error BinHelper__BinStepOverflows(uint256 bp)","error BinHelper__IdOverflows()","error JoeLibrary__InsufficientAmount()","error JoeLibrary__InsufficientLiquidity()","error LBRouter__AmountSlippageCaught(uint256 amountXMin, uint256 amountX, uint256 amountYMin, uint256 amountY)","error LBRouter__BinReserveOverflows(uint256 id)","error LBRouter__BrokenSwapSafetyCheck()","error LBRouter__DeadlineExceeded(uint256 deadline, uint256 currentTimestamp)","error LBRouter__FailedToSendAVAX(address recipient, uint256 amount)","error LBRouter__IdDesiredOverflows(uint256 idDesired, uint256 idSlippage)","error LBRouter__IdOverflows(int256 id)","error LBRouter__IdSlippageCaught(uint256 activeIdDesired, uint256 idSlippage, uint256 activeId)","error LBRouter__InsufficientAmountOut(uint256 amountOutMin, uint256 amountOut)","error LBRouter__InvalidTokenPath(address wrongToken)","error LBRouter__LengthsMismatch()","error LBRouter__MaxAmountInExceeded(uint256 amountInMax, uint256 amountIn)","error LBRouter__NotFactoryOwner()","error LBRouter__PairNotCreated(address tokenX, address tokenY, uint256 binStep)","error LBRouter__SenderIsNotWAVAX()","error LBRouter__SwapOverflows(uint256 id)","error LBRouter__TooMuchTokensIn(uint256 excess)","error LBRouter__WrongAmounts(uint256 amount, uint256 reserve)","error LBRouter__WrongAvaxLiquidityParameters(address tokenX, address tokenY, uint256 amountX, uint256 amountY, uint256 msgValue)","error LBRouter__WrongTokenOrder()","error Math128x128__LogUnderflow()","error Math128x128__PowerUnderflow(uint256 x, int256 y)","error Math512Bits__MulDivOverflow(uint256 prod1, uint256 denominator)","error Math512Bits__MulShiftOverflow(uint256 prod1, uint256 offset)","error Math512Bits__OffsetOverflows(uint256 offset)","error SafeCast__Exceeds128Bits(uint256 x)","error SafeCast__Exceeds40Bits(uint256 x)","error TokenHelper__CallFailed()","error TokenHelper__NonContract()","error TokenHelper__TransferFailed()","function addLiquidity((address tokenX, address tokenY, uint256 binStep, uint256 amountX, uint256 amountY, uint256 amountXMin, uint256 amountYMin, uint256 activeIdDesired, uint256 idSlippage, int256[] deltaIds, uint256[] distributionX, uint256[] distributionY, address to, uint256 deadline) _liquidityParameters) returns (uint256[] depositIds, uint256[] liquidityMinted)","function addLiquidityAVAX((address tokenX, address tokenY, uint256 binStep, uint256 amountX, uint256 amountY, uint256 amountXMin, uint256 amountYMin, uint256 activeIdDesired, uint256 idSlippage, int256[] deltaIds, uint256[] distributionX, uint256[] distributionY, address to, uint256 deadline) _liquidityParameters) payable returns (uint256[] depositIds, uint256[] liquidityMinted)","function createLBPair(address _tokenX, address _tokenY, uint24 _activeId, uint16 _binStep) returns (address pair)","function factory() view returns (address)","function getIdFromPrice(address _LBPair, uint256 _price) view returns (uint24)","function getPriceFromId(address _LBPair, uint24 _id) view returns (uint256)","function getSwapIn(address _LBPair, uint256 _amountOut, bool _swapForY) view returns (uint256 amountIn, uint256 feesIn)","function getSwapOut(address _LBPair, uint256 _amountIn, bool _swapForY) view returns (uint256 amountOut, uint256 feesIn)","function oldFactory() view returns (address)","function removeLiquidity(address _tokenX, address _tokenY, uint16 _binStep, uint256 _amountXMin, uint256 _amountYMin, uint256[] _ids, uint256[] _amounts, address _to, uint256 _deadline) returns (uint256 amountX, uint256 amountY)","function removeLiquidityAVAX(address _token, uint16 _binStep, uint256 _amountTokenMin, uint256 _amountAVAXMin, uint256[] _ids, uint256[] _amounts, address _to, uint256 _deadline) returns (uint256 amountToken, uint256 amountAVAX)","function swapAVAXForExactTokens(uint256 _amountOut, uint256[] _pairBinSteps, address[] _tokenPath, address _to, uint256 _deadline) payable returns (uint256[] amountsIn)","function swapExactAVAXForTokens(uint256 _amountOutMin, uint256[] _pairBinSteps, address[] _tokenPath, address _to, uint256 _deadline) payable returns (uint256 amountOut)","function swapExactAVAXForTokensSupportingFeeOnTransferTokens(uint256 _amountOutMin, uint256[] _pairBinSteps, address[] _tokenPath, address _to, uint256 _deadline) payable returns (uint256 amountOut)","function swapExactTokensForAVAX(uint256 _amountIn, uint256 _amountOutMinAVAX, uint256[] _pairBinSteps, address[] _tokenPath, address _to, uint256 _deadline) returns (uint256 amountOut)","function swapExactTokensForAVAXSupportingFeeOnTransferTokens(uint256 _amountIn, uint256 _amountOutMinAVAX, uint256[] _pairBinSteps, address[] _tokenPath, address _to, uint256 _deadline) returns (uint256 amountOut)","function swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, uint256[] _pairBinSteps, address[] _tokenPath, address _to, uint256 _deadline) returns (uint256 amountOut)","function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 _amountIn, uint256 _amountOutMin, uint256[] _pairBinSteps, address[] _tokenPath, address _to, uint256 _deadline) returns (uint256 amountOut)","function swapTokensForExactAVAX(uint256 _amountAVAXOut, uint256 _amountInMax, uint256[] _pairBinSteps, address[] _tokenPath, address _to, uint256 _deadline) returns (uint256[] amountsIn)","function swapTokensForExactTokens(uint256 _amountOut, uint256 _amountInMax, uint256[] _pairBinSteps, address[] _tokenPath, address _to, uint256 _deadline) returns (uint256[] amountsIn)","function sweep(address _token, address _to, uint256 _amount)","function sweepLBToken(address _lbToken, address _to, uint256[] _ids, uint256[] _amounts)","function wavax() view returns (address)","receive() payable"]